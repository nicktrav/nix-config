#!/usr/bin/env bash
# shellcheck disable=SC1090

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# Source all dotfiles
for file in ~/.{bash_prompt,aliases,functions,docker_functions,paths}; do
  if [[ -r "$file" ]] && [[ -f "$file" ]]; then
    # shellcheck source=/dev/null
    source "$file"
  fi
done
unset file

# Case-insensitive globbing
shopt -s nocaseglob

# Append to the Bash history file, rather than overwriting it
shopt -s histappend

# Autocorrect typos in path names when using `cd`
shopt -s cdspell

# Use vim for editing
export VISUAL=vim
export EDITOR="$VISUAL"

# Set default blocksize for ls, df, du
# from this: http://hints.macworld.com/comment.php?mode=view&cid=24491
export BLOCKSIZE=1k

# Do not store duplicate commands in bash history, as well commands that start
# with a space
export HISTCONTROL=ignoreboth

# Supercharge fzf with ripgrep
export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow -g "!{.git,.pants}/*"'

# Add utility scripts to path
export PATH=$HOME/bin:$PATH

# SSH with a Yubikey

_ssh_auth_sock=~/.ssh/yubikey-ssh.sock
if [ -z "$SSH_CLIENT" ]; then
  # Only export SSH_AUTH_SOCK if this is _not_ an ssh session. This allows an
  # incoming ssh session to use any ssh-agent that was spawned for it, which
  # will contain the configuration for any forwarded keys.
  export SSH_AUTH_SOCK="$_ssh_auth_sock"
fi

function restart-ssh-agent() {
  rm -f "$_ssh_auth_sock"
  pkill ssh-agent
  eval "ssh-agent -a $SSH_AUTH_SOCK -P $PKCS11_PATH" > /dev/null

  echo "Re-adding SSH key. Enter the passphrase for the Yubikey."
  yk-ssh-add
}

function yk-ssh-add() {
  ssh-add -s "$PKCS11_PATH"
}

function yk-ssh-show-pubkeys() {
  ssh-keygen -D "$PKCS11_PATH"
}

if [[ ! -S "$SSH_AUTH_SOCK" ]]; then
  restart-ssh-agent
fi

unset command_not_found_handle

# Add Go binaries to path.
export PATH="$PATH:$GOBIN"
